<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="net.htjs.sendsys.controller"/>
    <context:component-scan base-package="net.htjs.sendsys.aop"/>
    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
    <mvc:annotation-driven/>
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 配置SpringMVC的视图解析器 -->
    <!-- 其viewClass属性的默认值就是org.springframework.web.servlet.view.JstlView -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会找不到 -->
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/resources/**"的资源，都会从"/resources/"里面进行查找 -->
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/>
    <mvc:resources mapping="/favicon.ico" location="/"/>

    <!--拦截器是链式的，可以同时存在，根据声明的前后顺序执行-->
    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求,慎重使用 -->
        <!--<bean class="net.htjs.sendsys.interceptor.IpInterceptor"/>-->
        <mvc:interceptor>
            <mvc:mapping path="/demo"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="net.htjs.sendsys.interceptor.IpInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>